"0","#rerun the steps we did after saving last week"
"0",""
"0","Tcells <- RunPCA("
"0","  object = Tcells,"
"0","  verbose = FALSE,"
"0","  npcs = 12)"
"0",""
"0","pca_dims <- 1:9"
"0",""
"0","Tcells <- FindNeighbors(object = Tcells,"
"0","                        reduction = ""pca"","
"0","                        k.param = 20,"
"0","                        dims = pca_dims)"
"2","Computing nearest neighbor graph
"
"2","Computing SNN
"
"0","Tcells <- FindClusters(object = Tcells,"
"0","                       modularity.fxn = 1,"
"0","                       algorithm = 1,"
"0","                       resolution = c(0.1,0.2))"
"1","Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck"
"1","
"
"1","
"
"1","Number of nodes: 4341
"
"1","Number of edges: 140245
"
"1","
"
"1","Running "
"1","Louvain algorithm"
"1","..."
"1","
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"1","Maximum modularity in 10 random starts: 0.9255
"
"1","Number of communities: 2
"
"1","Elapsed time: 0 seconds
"
"1","Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck"
"1","
"
"1","
"
"1","Number of nodes: 4341
"
"1","Number of edges: 140245
"
"1","
"
"1","Running "
"1","Louvain algorithm"
"1","..."
"1","
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"1","Maximum modularity in 10 random starts: 0.8840
"
"1","Number of communities: 3
"
"1","Elapsed time: 0 seconds
"
"0","Tcells <- RunUMAP("
"0","  object = Tcells,"
"0","  reduction = ""pca"","
"0","  dims = pca_dims,"
"0","  seed.use = 1)"
"2","Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session"
"2","14:29:55 UMAP embedding parameters a = 0.9922 b = 1.112
"
"2","14:29:55 Read 4341 rows and found 9 numeric columns
"
"2","14:29:55 Using Annoy for neighbor search, n_neighbors = 30
"
"2","14:29:55 Building Annoy index with metric = cosine, n_trees = 50
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"2","14:29:56 Writing NN index file to temp file /var/folders/_8/v86wwfs5033cwnrgdt2znnpr0000gp/T//Rtmp0I9pgp/file68c7254cd329
"
"2","14:29:56 Searching Annoy index using 1 thread, search_k = 3000
"
"2","14:29:57 Annoy recall = 100%
"
"2","14:29:58 Commencing smooth kNN distance calibration using 1 thread"
"2"," with target n_neighbors = 30
"
"2","14:29:58 Initializing from normalized Laplacian + noise (using irlba)
"
"2","14:29:59 Commencing optimization for 500 epochs, with 168542 positive edges
"
"2","Using method '"
"2","umap"
"2","'"
"2","
"
"2","0%   10   20   30   40   50   60   70   80   90   100%
"
"2","[----|----|----|----|----|----|----|----|----|----|
"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","*"
"2","|
"
"2","14:30:04 Optimization finished
"
